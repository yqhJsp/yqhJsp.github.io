<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yqhJsp</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-25T02:41:29.134Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yqh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搭建vue-app的开发环境以及打包app发布</title>
    <link href="http://yoursite.com/2019/02/25/%E6%90%AD%E5%BB%BAvue-app%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%BB%A5%E5%8F%8A%E6%89%93%E5%8C%85app%E5%8F%91%E5%B8%83/"/>
    <id>http://yoursite.com/2019/02/25/搭建vue-app的开发环境以及打包app发布/</id>
    <published>2019-02-25T02:38:36.000Z</published>
    <updated>2019-02-25T02:41:29.134Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue-app-cli"><a href="#vue-app-cli" class="headerlink" title="vue-app-cli"></a>vue-app-cli</h3><p>可以快速构建基于vue的app多页应用，对h5页面app和html5 plus原生app都十分友好。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue-app-cli&quot;&gt;&lt;a href=&quot;#vue-app-cli&quot; class=&quot;headerlink&quot; title=&quot;vue-app-cli&quot;&gt;&lt;/a&gt;vue-app-cli&lt;/h3&gt;&lt;p&gt;可以快速构建基于vue的app多页应用，对h5页面app和html5
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在vue项目中使用axios的post请求遇到的问题</title>
    <link href="http://yoursite.com/2019/02/18/%E5%9C%A8vue%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8axios%E7%9A%84post%E8%AF%B7%E6%B1%82%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/02/18/在vue项目中使用axios的post请求遇到的问题/</id>
    <published>2019-02-18T03:59:36.000Z</published>
    <updated>2019-02-18T04:01:04.206Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在使用axios这个ajax插件的时候，我们有些时候会遇到一些问题，比如：数据格式不正确"><a href="#在使用axios这个ajax插件的时候，我们有些时候会遇到一些问题，比如：数据格式不正确" class="headerlink" title="在使用axios这个ajax插件的时候，我们有些时候会遇到一些问题，比如：数据格式不正确"></a>在使用axios这个ajax插件的时候，我们有些时候会遇到一些问题，比如：数据格式不正确</h3><p>1、post请求需要传递form表单的数据给后台，而axios的post默认的contentType的数据格式是json，而我们要传的是form-data类型，以下有三种方案：</p><p>（1）使用js的序列化方法stringify（）</p><p>（2）使用formData函数，将form表单元素的name与value进行组合，实现表单数据的序列化（注：formData还有个功能：异步上传文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//通过FormData构造函数创建一个空对象</span><br><span class="line">var formdata=new FormData();</span><br><span class="line">//通过append()方法在末尾追加key为name值为laoliu的数据</span><br><span class="line">formdata.append(<span class="string">"name"</span>,<span class="string">"laoliu"</span>);</span><br></pre></td></tr></table></figure><p>（3）使用URLSearchParams处理axios发送的数据，但是要考虑它的兼容性，IE不支持<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var params=new URLSearchParams()</span><br><span class="line">params.append(<span class="string">'name'</span>:<span class="string">'li'</span>)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在使用axios这个ajax插件的时候，我们有些时候会遇到一些问题，比如：数据格式不正确&quot;&gt;&lt;a href=&quot;#在使用axios这个ajax插件的时候，我们有些时候会遇到一些问题，比如：数据格式不正确&quot; class=&quot;headerlink&quot; title=&quot;在使用a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack项目的搭建</title>
    <link href="http://yoursite.com/2019/02/15/webpack%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/02/15/webpack项目的搭建/</id>
    <published>2019-02-15T02:10:48.000Z</published>
    <updated>2019-02-18T02:30:31.331Z</updated>
    
    <content type="html"><![CDATA[<h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤:"></a>搭建步骤:</h3><p>1、新建个文件web-demo,初始化 npm init，该文件夹下会出现package.json文件</p><p>2、安装依赖包 npm install</p><p>3、安装webpack<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm  install webpack  --sava-dev</span><br><span class="line">( 注：--sava-dev是开发环境)</span><br></pre></td></tr></table></figure></p><p>4、新建一个webpack.config.js文件</p><p>5、新建一个src文件夹，并新建一个page的文件夹，里面新建index.html\index.css\indecx.js文件</p><p>6、为使webpack启动方便，我们在package，json的scripts里配置:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"webpack --config webpack.config.js --progress --display-modules --colors --display-reason"</span>,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>7、安装插件启动webpack的插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-cli --save-dev</span><br><span class="line">npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></p><p> 8、配置webpack.config.js如下：<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">  const HtmlWebpackPlugin = require(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line">// const CleanWebpackPlugin = require(<span class="string">'clean-webpack-plugin'</span>); //每次构建前清理 /dist 文件夹</span><br><span class="line">const path = require(<span class="string">'path'</span>)</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    page1: __dirname + <span class="string">'/src/page1/index.js'</span>,// page1的入口文件，webpack是以js为入口文件的</span><br><span class="line">    page2: __dirname + <span class="string">'/src/page2/index.js'</span>,</span><br><span class="line"></span><br><span class="line">    //把为入口文件放在dist目录的js文件夹下，</span><br><span class="line">    //name是文件名，chunkhash是每次打包文件的<span class="built_in">hash</span>值，</span><br><span class="line">    //目的是如果哪个文件修改，chunkhash会改变，可以只上线修改过的文件</span><br><span class="line">    // publicPath: <span class="string">'http://cdn.com/'</span> //如果上线，可以改为线上地址</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">'/dist'</span>,//产出路径，一般放在dist目录下</span><br><span class="line">    filename: <span class="string">'js/[name]-[chunkhash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  //配置本地服务器</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: 8088,</span><br><span class="line">    inline: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,  //自动打开浏览器</span><br><span class="line">    hot: <span class="literal">false</span>,  //慎用，打开热更新，会导致修改样式可能不支持。关闭热更新，页面会强刷</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">"dist"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="built_in">test</span>: /\.css$/,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              importLoaders: 1</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              plugins: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">                <span class="built_in">return</span> [</span><br><span class="line">                  require(<span class="string">'autoprefixer'</span>)(&#123;</span><br><span class="line">                    browsers: [<span class="string">"last 5 versions"</span>]</span><br><span class="line">                  &#125;), //添加浏览器前缀</span><br><span class="line">                ];</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        exclude: /node_modules/</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'page1.html'</span>,//入口html</span><br><span class="line">      template: <span class="string">'./src/page1/index.html'</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        // removeComments:<span class="literal">true</span>,   //删除注释</span><br><span class="line">        // collapseWhitespace: <span class="literal">true</span>      //删除空格，压缩</span><br><span class="line">      &#125;,</span><br><span class="line">      chunks: [<span class="string">'page1'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    new HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'page2.html'</span>,//入口html</span><br><span class="line">      template: <span class="string">'./src/page2/index.html'</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        // removeComments:<span class="literal">true</span>,   //删除注释</span><br><span class="line">        // collapseWhitespace: <span class="literal">true</span>      //删除空格，压缩</span><br><span class="line">      &#125;,</span><br><span class="line">      chunks: [<span class="string">'page2'</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    // new CleanWebpackPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>9、运行npm run webpack打包，便可以看到项目目录出现dist文件夹，该文件夹里的文件就是打包过后的文件</p><p>10、配置本地启动的服务器localhost，处理scss，css，图片等资源</p><p>10.1、配置本地服务器：</p><p>10.2. 在 package.json 下面配置如下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line"><span class="string">"start"</span>: <span class="string">"node_modules/.bin/webpack-dev-server"</span>,</span><br><span class="line"><span class="string">"dev"</span>: <span class="string">"webpack --mode development"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>10.3、在 webpack.config.js 引入 path<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const path = require(<span class="string">'path'</span>);</span><br></pre></td></tr></table></figure></p><p>10.4、在  webpack.config.js 配置 devServer<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//配置本地服务器</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: 8088,</span><br><span class="line">    inline: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,  //自动打开浏览器</span><br><span class="line">    hot: <span class="literal">false</span>,  //慎用，打开热更新，会导致修改样式可能不支持。关闭热更新，页面会强刷</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">"dist"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">``` </span><br><span class="line">10.5、运行npm run dev然后在运行npm run start</span><br><span class="line"></span><br><span class="line">10.6、处理CSS,SCSS文件类型：</span><br><span class="line"></span><br><span class="line">在 index.css 下面给 body 添加背景颜色：</span><br><span class="line">```bash</span><br><span class="line">body&#123;</span><br><span class="line">    background-color:red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 index.js 引入这两个 css 文件</p><p>10.6、安装处理css的插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev css-loader style-loader</span><br><span class="line"> </span><br><span class="line">npm install sass-loader node-sass --save-dev</span><br><span class="line"> </span><br><span class="line">npm install postcss-cli autoprefixer</span><br></pre></td></tr></table></figure></p><p>然后在运行npm run start</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;搭建步骤&quot;&gt;&lt;a href=&quot;#搭建步骤&quot; class=&quot;headerlink&quot; title=&quot;搭建步骤:&quot;&gt;&lt;/a&gt;搭建步骤:&lt;/h3&gt;&lt;p&gt;1、新建个文件web-demo,初始化 npm init，该文件夹下会出现package.json文件&lt;/p&gt;
&lt;p&gt;2
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue的插槽slot和作用域插槽slot-scope</title>
    <link href="http://yoursite.com/2019/02/14/vue%E7%9A%84%E6%8F%92%E6%A7%BDslot%E5%92%8C%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BDslot-scope/"/>
    <id>http://yoursite.com/2019/02/14/vue的插槽slot和作用域插槽slot-scope/</id>
    <published>2019-02-14T07:02:01.000Z</published>
    <updated>2019-02-14T07:39:31.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="插槽slot的简单理解"><a href="#插槽slot的简单理解" class="headerlink" title="插槽slot的简单理解:"></a>插槽slot的简单理解:</h3><p>插槽，也就是slot，是组件中的一块HTML模板，这模块的显示与否由父组件决定。</p><h3 id="单个插槽-默认插槽-匿名插槽-顾名思义就是无name命名的slot"><a href="#单个插槽-默认插槽-匿名插槽-顾名思义就是无name命名的slot" class="headerlink" title="单个插槽(默认插槽/匿名插槽)-顾名思义就是无name命名的slot"></a>单个插槽(默认插槽/匿名插槽)-顾名思义就是无name命名的slot</h3><h4 id="在组件my-component中的形式如"><a href="#在组件my-component中的形式如" class="headerlink" title="在组件my-component中的形式如:"></a>在组件my-component中的形式如:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h2&gt;我是子组件的标题&lt;/h2&gt;</span><br><span class="line">  &lt;slot&gt;</span><br><span class="line">    只有在没有要分发的内容时才会显示。</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="父组件模版"><a href="#父组件模版" class="headerlink" title="父组件模版:"></a>父组件模版:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h1&gt;我是父组件的标题&lt;/h1&gt;</span><br><span class="line">  &lt;my-component&gt;</span><br><span class="line">    &lt;p&gt;这是一些初始内容&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;这是更多的初始内容&lt;/p&gt;</span><br><span class="line">  &lt;/my-component&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="渲染结果"><a href="#渲染结果" class="headerlink" title="渲染结果"></a>渲染结果</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;h1&gt;我是父组件的标题&lt;/h1&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;我是子组件的标题&lt;/h2&gt;</span><br><span class="line">    &lt;!--这里是slot--&gt;</span><br><span class="line">    &lt;p&gt;这是一些初始内容&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;这是更多的初始内容&lt;/p&gt;</span><br><span class="line">    &lt;!--slot--end--&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="具名插槽-可以用特性name进行命名-多个插槽的命名不能相同"><a href="#具名插槽-可以用特性name进行命名-多个插槽的命名不能相同" class="headerlink" title="具名插槽(可以用特性name进行命名,多个插槽的命名不能相同)"></a>具名插槽(可以用特性name进行命名,多个插槽的命名不能相同)</h3><p>例子:有多个插槽slot的组件app-layout的模版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"container"</span>&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;slot name=<span class="string">"header"</span>&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;slot name=<span class="string">"footer"</span>&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>父组件的模版:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;app-layout&gt;</span><br><span class="line">  &lt;h1 slot=<span class="string">"header"</span>&gt;这里可能是一个页面标题&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p&gt;主要内容的一个段落。&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;另一个主要段落。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">  &lt;p slot=<span class="string">"footer"</span>&gt;这里有一些联系信息&lt;/p&gt;</span><br><span class="line">&lt;/app-layout&gt;</span><br></pre></td></tr></table></figure><p>渲染结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=<span class="string">"container"</span>&gt;</span><br><span class="line">  &lt;header&gt;</span><br><span class="line">    &lt;h1&gt;这里可能是一个页面标题&lt;/h1&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">  &lt;main&gt;</span><br><span class="line">    &lt;p&gt;主要内容的一个段落。&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;另一个主要段落。&lt;/p&gt;</span><br><span class="line">  &lt;/main&gt;</span><br><span class="line">  &lt;footer&gt;</span><br><span class="line">    &lt;p&gt;这里有一些联系信息&lt;/p&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="作用域插槽-可用作一个能被传递数据的可重用模版"><a href="#作用域插槽-可用作一个能被传递数据的可重用模版" class="headerlink" title="作用域插槽(可用作一个能被传递数据的可重用模版)"></a>作用域插槽(可用作一个能被传递数据的可重用模版)</h3><h4 id="在子组件中，只需将数据传递到插槽，就像你将-prop-传递给组件一样："><a href="#在子组件中，只需将数据传递到插槽，就像你将-prop-传递给组件一样：" class="headerlink" title="在子组件中，只需将数据传递到插槽，就像你将 prop 传递给组件一样："></a>在子组件中，只需将数据传递到插槽，就像你将 prop 传递给组件一样：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;slot name=<span class="string">"item"</span></span><br><span class="line">    v-for=<span class="string">"item in items"</span></span><br><span class="line">    :text=<span class="string">"item.text"</span>&gt;</span><br><span class="line">    &lt;!-- 这里写入备用内容 --&gt;</span><br><span class="line">  &lt;/slot&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h4 id="在父级中，具有特殊特性-slot-scope-的元素必须存在，表示它是作用域插槽的模板。slot-scope-的值将被用作一个临时变量名，此变量接收从子组件传递过来的-prop-对象："><a href="#在父级中，具有特殊特性-slot-scope-的元素必须存在，表示它是作用域插槽的模板。slot-scope-的值将被用作一个临时变量名，此变量接收从子组件传递过来的-prop-对象：" class="headerlink" title="在父级中，具有特殊特性 slot-scope 的元素必须存在，表示它是作用域插槽的模板。slot-scope 的值将被用作一个临时变量名，此变量接收从子组件传递过来的 prop 对象："></a>在父级中，具有特殊特性 slot-scope 的元素必须存在，表示它是作用域插槽的模板。slot-scope 的值将被用作一个临时变量名，此变量接收从子组件传递过来的 prop 对象：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-awesome-list :items=<span class="string">"items"</span>&gt;</span><br><span class="line">  &lt;!-- 作用域插槽也可以是具名的 --&gt;</span><br><span class="line">  &lt;li</span><br><span class="line">    slot=<span class="string">"item"</span></span><br><span class="line">    slot-scope=<span class="string">"&#123; text &#125;"</span>   //解构</span><br><span class="line">    class=<span class="string">"my-fancy-item"</span>&gt;</span><br><span class="line">    &#123;&#123; text &#125;&#125;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/my-awesome-list&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;插槽slot的简单理解&quot;&gt;&lt;a href=&quot;#插槽slot的简单理解&quot; class=&quot;headerlink&quot; title=&quot;插槽slot的简单理解:&quot;&gt;&lt;/a&gt;插槽slot的简单理解:&lt;/h3&gt;&lt;p&gt;插槽，也就是slot，是组件中的一块HTML模板，这模块的显示与
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue的路由跳转方式</title>
    <link href="http://yoursite.com/2019/02/01/vue%E7%9A%84%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/02/01/vue的路由跳转方式/</id>
    <published>2019-02-01T08:45:26.013Z</published>
    <updated>2019-02-18T03:53:08.800Z</updated>
    
    <content type="html"><![CDATA[<h3 id="现有如下场景，点击父组件的li元素跳转到子组件中，并携带参数，便于子组件获取数据"><a href="#现有如下场景，点击父组件的li元素跳转到子组件中，并携带参数，便于子组件获取数据" class="headerlink" title="现有如下场景，点击父组件的li元素跳转到子组件中，并携带参数，便于子组件获取数据"></a>现有如下场景，点击父组件的li元素跳转到子组件中，并携带参数，便于子组件获取数据</h3><p>父组件中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for=<span class="string">"article in articles"</span> @click=<span class="string">"getDescribe(article.id)"</span>&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p><p>方案一：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">getDescribe(<span class="keyword">id</span>) &#123;</span><br><span class="line"><span class="comment">//直接调用$router.push 实现携带参数的跳转</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">path: `/describe/$&#123;<span class="keyword">id</span>&#125;`,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>方案一:需要对应路由配置如下<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">path: '/describe/:id',</span><br><span class="line">name: 'Describe',</span><br><span class="line">component: Describe</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很显然，需要在path中添加/:id来对应 $router.push 中path携带的参数。在子组件中可以使用来获取传递的参数值。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$route.params.id</span><br></pre></td></tr></table></figure></p><p>方案二：<br>父组件中：通过路由属性中的name来确定匹配的路由，通过params来传递参数。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line">name: 'Describe',</span><br><span class="line">params: &#123;</span><br><span class="line"><span class="keyword">id</span>: <span class="keyword">id</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>对应路由配置: 注意这里不能使用:/id来传递参数了，因为父组件中，已经使用params来携带参数了。<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: '/describe',</span><br><span class="line">  name: 'Describe',</span><br><span class="line">  component: Describe</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>子组件中: 这样来获取参数<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$route.params.id</span><br></pre></td></tr></table></figure></p><p>方案三：<br>父组件：使用path来匹配路由，然后通过query来传递参数<br>这种情况下 query传递的参数会显示在url后面?id=？<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">this</span>.$router.push(&#123;</span><br><span class="line"> path: '/describe',</span><br><span class="line"> query: &#123;</span><br><span class="line"><span class="keyword">id</span>: <span class="keyword">id</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>对应路由配置：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: '/describe',</span><br><span class="line">  name: 'Describe',</span><br><span class="line">  component: Describe</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对应子组件: 这样来获取参数<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$route.query.id</span><br></pre></td></tr></table></figure></p><p>方案四：配置好路由<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: '/run-situation/financial-indicator',</span><br><span class="line">    name: 'rsFinancial',</span><br><span class="line">    component: () =&gt;</span><br><span class="line">      import('pages/run-situation/financial-indicator'),</span><br><span class="line">    meta: &#123;</span><br><span class="line">      index: <span class="number">0</span>,</span><br><span class="line">      keepAlive: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    props: (route) =&gt; (&#123;</span><br><span class="line">      domId: route.query.domId || <span class="string">""</span>,</span><br><span class="line">      title: route.query.title,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">html：</span><br><span class="line">&lt;router-link :to="&#123;name: 'rsFinancial', query:&#123;'title':item.name&#125;&#125;" class="financial"&gt;&lt;/router-link &gt;</span><br></pre></td></tr></table></figure><p>  子组件获取参数：props: [‘title’],</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;现有如下场景，点击父组件的li元素跳转到子组件中，并携带参数，便于子组件获取数据&quot;&gt;&lt;a href=&quot;#现有如下场景，点击父组件的li元素跳转到子组件中，并携带参数，便于子组件获取数据&quot; class=&quot;headerlink&quot; title=&quot;现有如下场景，点击父组件
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node连接数据库的操作</title>
    <link href="http://yoursite.com/2019/02/01/node%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/02/01/node连接数据库的操作/</id>
    <published>2019-02-01T07:59:48.000Z</published>
    <updated>2019-02-01T09:08:10.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="node连接数据库的操作"><a href="#node连接数据库的操作" class="headerlink" title="node连接数据库的操作"></a>node连接数据库的操作</h2><p>提：自动安装的mysql不在/usr/bin目录下，所以需要重新设置环境变量 才可以在终端Yvonne目录下启动mysql</p><ul><li>启动数据库 cmd: mysql -u root -p  //本地数据库</li><li>打开设置里的目录</li></ul><ul><li>1）新建数据库</li></ul><p>mysql&gt; show databases;<br>结果：</p><p><img src="/2019/02/01/node连接数据库的操作/node.png" alt="示例图片" title="示例图片"></p><ul><li>2 进入数据库）mysql&gt; use bh</li><li>3 进入表）mysql&gt; show tables;</li><li>4 新建表)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE `blogInfo` (</span><br><span class="line">    -&gt;   `id` int(11) unsigned NOT NULL AUTO_INCREMENT COMMENT <span class="string">'主键ID值'</span>,</span><br><span class="line">    -&gt;   `status` int(11) NOT NULL DEFAULT <span class="string">'0'</span> COMMENT <span class="string">'博文状态, 0：有效  1：停止   2：删除'</span>,</span><br><span class="line">    -&gt;   `contentSource` varchar(255) NOT NULL DEFAULT <span class="string">''</span> COMMENT <span class="string">'博文内容'</span>,</span><br><span class="line">    -&gt;   `blogId` varchar(255) NOT NULL DEFAULT <span class="string">''</span> COMMENT <span class="string">'博文ID'</span>,</span><br><span class="line">    -&gt;   `blogName` varchar(255) NOT NULL DEFAULT <span class="string">''</span> COMMENT <span class="string">'博文标题'</span>,</span><br><span class="line">    -&gt;   `blogParams` varchar(1024) NOT NULL DEFAULT <span class="string">''</span> COMMENT <span class="string">'参数'</span>,</span><br><span class="line">    -&gt;   `createTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT <span class="string">'创建时间'</span>,</span><br><span class="line">    -&gt;   `updateTime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT <span class="string">'更新时间'</span>,</span><br><span class="line">    -&gt;   PRIMARY KEY (`id`)</span><br><span class="line">    -&gt; ) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br><span class="line">* 5 show表）</span><br><span class="line">mysql&gt; show tables;</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-------------------+</span><br><span class="line">| Tables_in_bh      |</span><br><span class="line">+-------------------+</span><br><span class="line">| blogInfo |</span><br><span class="line">+-------------------+</span><br></pre></td></tr></table></figure></p><h3 id="Egg-node项目框架"><a href="#Egg-node项目框架" class="headerlink" title="Egg node项目框架"></a>Egg node项目框架</h3><p>2.后端sequelize连接数据库</p><p>1）关联数据库</p><pre><code>var sequelize = new Sequelize(&apos;database&apos;, &apos;username&apos;, &apos;password&apos;, {…</code></pre><p>2）关联模型</p><pre><code>const Project = sequelize.define(&apos;project&apos;, {  title: Sequelize.STRING,//定义字段类型  description: Sequelize.TEXT})要定义模型和表之间的映射，请使用define方法。</code></pre><p>3）操作数据库<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app/controller/operaterLog</span><br><span class="line">       </span><br><span class="line">Project.findOne()</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>）调用的接口app/public/src/service</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>）页面app/public/page/operaterlog</span><br><span class="line">Async函数返回的是一个promise对象</span><br><span class="line">promise函数 需要用resolve接收返回结果</span><br><span class="line">注意箭头函数不绑定<span class="keyword">this</span></span><br></pre></td></tr></table></figure></p><p>Ssdb是当数据库挂了数据会自动先保存到本地</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;node连接数据库的操作&quot;&gt;&lt;a href=&quot;#node连接数据库的操作&quot; class=&quot;headerlink&quot; title=&quot;node连接数据库的操作&quot;&gt;&lt;/a&gt;node连接数据库的操作&lt;/h2&gt;&lt;p&gt;提：自动安装的mysql不在/usr/bin目录下，所以需要
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>es6的常用函数</title>
    <link href="http://yoursite.com/2019/02/01/es6%E7%9A%84%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/02/01/es6的常用函数/</id>
    <published>2019-02-01T07:59:48.000Z</published>
    <updated>2019-02-18T03:46:05.453Z</updated>
    
    <content type="html"><![CDATA[<p>1、es6的数组实例的 entries()，是键值对的遍历<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> [index, elem] of [<span class="string">'a'</span>, <span class="string">'b'</span>].entries()) &#123;</span><br><span class="line">  console.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line">// 0 <span class="string">"a"</span></span><br><span class="line">// 1 <span class="string">"b"</span></span><br></pre></td></tr></table></figure></p><p>2、对象的解构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> &#123;list,children&#125;=data</span><br><span class="line">list=data.list</span><br><span class="line">children=list.children</span><br></pre></td></tr></table></figure><p>(注意，data中必须包含同名的对象）</p><p>3、数组的浅拷贝<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> d=[1,2,3]</span><br><span class="line"><span class="built_in">let</span> arr=[...data,5,6]</span><br><span class="line">(...扩展符号）</span><br></pre></td></tr></table></figure></p><p>4、数组的解构<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">let</span> [a,b,c]=[1,2,3]</span><br><span class="line">console.log(a,b,c)</span><br><span class="line">打印:1,2,3</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、es6的数组实例的 entries()，是键值对的遍历&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue的组件的传值方式</title>
    <link href="http://yoursite.com/2019/02/01/vue%E7%9A%84%E7%BB%84%E4%BB%B6%E7%9A%84%E4%BC%A0%E5%80%BC%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/02/01/vue的组件的传值方式/</id>
    <published>2019-02-01T07:59:48.000Z</published>
    <updated>2019-02-01T08:42:34.684Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、子组件向父组件传值"><a href="#1、子组件向父组件传值" class="headerlink" title="1、子组件向父组件传值"></a>1、子组件向父组件传值</h3><p>(1)父组件通过props传值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;gdp-analy :params=<span class="string">"params"</span>:rsEcoConstruct=<span class="string">"permiseMixin.rsEcoConstruct"</span> ref=<span class="string">"gdpAnaly"</span>&gt;&lt;/gdp-analy&gt;</span><br></pre></td></tr></table></figure></p><p>(2)子组件接收父组件的参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">name: <span class="string">'fundTrade'</span>,</span><br><span class="line">components: &#123;&#125;,</span><br><span class="line">props: &#123;</span><br><span class="line">params: Object,</span><br><span class="line">rsEcoConstruct: &#123;</span><br><span class="line"><span class="built_in">type</span>: String,</span><br><span class="line">default: <span class="string">'false'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="2、直接获取父级的值-parent-xxxx（局限性比较大，因为必须保证父级有该值）"><a href="#2、直接获取父级的值-parent-xxxx（局限性比较大，因为必须保证父级有该值）" class="headerlink" title="2、直接获取父级的值$parent.xxxx（局限性比较大，因为必须保证父级有该值）"></a>2、直接获取父级的值$parent.xxxx（局限性比较大，因为必须保证父级有该值）</h3><h3 id="二、父组件的事件触发响应子组件的请求"><a href="#二、父组件的事件触发响应子组件的请求" class="headerlink" title="二、父组件的事件触发响应子组件的请求"></a>二、父组件的事件触发响应子组件的请求</h3><p>(1)在子组件添加事件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">pChangeType</span></span>() &#123;</span><br><span class="line">this.params.countType = this.<span class="variable">$parent</span>.countType</span><br><span class="line">this.getEch1()</span><br><span class="line">this.getTable1()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(2)在父组件的点击事件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">changeData</span></span>()&#123;</span><br><span class="line">(1)//直接用<span class="variable">$parent</span>.xxx</span><br><span class="line">this.<span class="variable">$refs</span>.childrenOne.pChangeType()</span><br></pre></td></tr></table></figure></p><p>注意：用props传值,避免时间钩子问题，导致父组件还没渲染完，拿不到值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.<span class="variable">$nextTick</span>(() =&gt; &#123;</span><br><span class="line">this.<span class="variable">$refs</span>.childrenOne.init()</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><h3 id="三、vue的兄弟组件件的通信"><a href="#三、vue的兄弟组件件的通信" class="headerlink" title="三、vue的兄弟组件件的通信"></a>三、vue的兄弟组件件的通信</h3><p>（1）eventBus(vue2.0s版本才有)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">步骤1：新建一个eventBus的js</span><br><span class="line">import Vue from <span class="string">'vue'</span>;</span><br><span class="line"><span class="built_in">export</span> default new Vue();</span><br><span class="line"></span><br><span class="line">在要使用eventBus的地方导入import Bus from <span class="string">'@/assets/js/eventBus'</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">步骤2：在要派发参数或事件的组件中用<span class="variable">$emit</span>绑定派发事件</span><br><span class="line">html:&lt;a class=<span class="string">"font-blue"</span> href=<span class="string">"javascript:;"</span> @click=<span class="string">"goCheck(item,0)"</span>&gt;查看&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">js:</span><br><span class="line">goCheck(item, index) &#123;</span><br><span class="line">Bus.<span class="variable">$emit</span>(<span class="string">'business-model-check'</span>, &#123; item, index &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">步骤3：在兄弟组件中用<span class="variable">$on</span>监听是否有该事件</span><br><span class="line"><span class="function"><span class="title">mounted</span></span>() &#123;</span><br><span class="line">this.init()</span><br><span class="line">Bus.<span class="variable">$on</span>(<span class="string">'business-model-check'</span>, params =&gt; &#123;</span><br><span class="line">this.getDetail(params)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、子组件向父组件传值&quot;&gt;&lt;a href=&quot;#1、子组件向父组件传值&quot; class=&quot;headerlink&quot; title=&quot;1、子组件向父组件传值&quot;&gt;&lt;/a&gt;1、子组件向父组件传值&lt;/h3&gt;&lt;p&gt;(1)父组件通过props传值&lt;br&gt;&lt;figure class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript的常用截取字符串的函数</title>
    <link href="http://yoursite.com/2019/02/01/javascript%E7%9A%84%E5%B8%B8%E7%94%A8%E6%88%AA%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2019/02/01/javascript的常用截取字符串的函数/</id>
    <published>2019-02-01T07:59:48.000Z</published>
    <updated>2019-02-01T08:19:22.324Z</updated>
    
    <content type="html"><![CDATA[<h3 id="substr-、substring-、slice的用法"><a href="#substr-、substring-、slice的用法" class="headerlink" title="substr 、substring 、slice的用法"></a>substr 、substring 、slice的用法</h3><p>(1)substr获取从指定位置开始到指定字符数的字符;</p><p>(2)substring返回一个从指定开始的索引到结束的索引的字符串;</p><p>(3)slice：不改变原字符串，提取指定的字符串的一部分，返回一个新的字符串。</p><h3 id="1、slice去除指定位置的字符串或新增"><a href="#1、slice去除指定位置的字符串或新增" class="headerlink" title="1、slice去除指定位置的字符串或新增"></a>1、slice去除指定位置的字符串或新增</h3><h3 id="2、给”指针传递”的函数返回值加const-则返回值不能被直接修改-且该返回值只能被赋值给加const修饰的同类型指针"><a href="#2、给”指针传递”的函数返回值加const-则返回值不能被直接修改-且该返回值只能被赋值给加const修饰的同类型指针" class="headerlink" title="2、给”指针传递”的函数返回值加const,则返回值不能被直接修改,且该返回值只能被赋值给加const修饰的同类型指针"></a>2、给”指针传递”的函数返回值加const,则返回值不能被直接修改,且该返回值只能被赋值给加const修饰的同类型指针</h3><p>(1)const用于修饰函数时，一般是const修饰类的成员函数（函数定义体），表示在函数体中成员变量不能改变；</p><p>其函数形式为：int ff(void)const;</p><p>(2)const修饰函数的返回值，用于返回常量；</p><p>如const int ff(); //返回的是常量,所以必须这么调用 const int a=ff();</p><p>(3)const int* i=0;  代表i是常量，里面的值不能够变</p><p>int* const i=;  代表指针i是常量，所指的内容可以修改</p><p>3、unshift倒叙排序<br>4、replace方法的语法是：stringObj.replace(rgExp, replaceText) 其中stringObj是字符串(string)，reExp可以是正则表达式对象(RegExp)也可以是字符串(string)，replaceText是替代查找到的字符串。。为了帮助大家更好的理解，下面举个简单例子说明一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s = <span class="string">"中文 - 标题"</span>.replace(/[\u4e00-\u9fa5]+\s+\-\s+/,<span class="string">''</span>); </span><br><span class="line"></span><br><span class="line">console.log(s)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;substr-、substring-、slice的用法&quot;&gt;&lt;a href=&quot;#substr-、substring-、slice的用法&quot; class=&quot;headerlink&quot; title=&quot;substr 、substring 、slice的用法&quot;&gt;&lt;/a&gt;subst
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue的混合注入mixins</title>
    <link href="http://yoursite.com/2019/02/01/vue%E7%9A%84%E6%B7%B7%E5%90%88%E6%B3%A8%E5%85%A5mixins/"/>
    <id>http://yoursite.com/2019/02/01/vue的混合注入mixins/</id>
    <published>2019-02-01T06:32:09.000Z</published>
    <updated>2019-02-01T06:34:45.364Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue的混合注入mixins的相关理解和使用"><a href="#vue的混合注入mixins的相关理解和使用" class="headerlink" title="vue的混合注入mixins的相关理解和使用"></a>vue的混合注入mixins的相关理解和使用</h3><p>1、mixins 选项接受一个混入对象的数组；</p><p>2、这些混入实例对象可以像正常的实例对象一样包含选项，他们将在 Vue.extend() 里最终选择使用相同的选项合并逻辑合并。</p><p>3、如果混入包含一个钩子而创建组件本身也有一个，那么这两个函数会同时被调用；</p><p>4、Mixin 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">子组件中导入</span><br><span class="line">import glMixin from <span class="string">'@/assets/js/global-mixin'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">mixins: [glMixin, pageMixin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vue的混合注入mixins的相关理解和使用&quot;&gt;&lt;a href=&quot;#vue的混合注入mixins的相关理解和使用&quot; class=&quot;headerlink&quot; title=&quot;vue的混合注入mixins的相关理解和使用&quot;&gt;&lt;/a&gt;vue的混合注入mixins的相关理解和
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo搭建博客</title>
    <link href="http://yoursite.com/2019/02/01/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2019/02/01/hexo搭建博客/</id>
    <published>2019-02-01T03:41:22.000Z</published>
    <updated>2019-02-01T07:04:03.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建node-js环境"><a href="#搭建node-js环境" class="headerlink" title="搭建node.js环境"></a>搭建node.js环境</h2><p>(1)安装node.js<br>(2)测试是否安装成功:node -v、npm -v</p><h3 id="安装Hexo博客框架工具"><a href="#安装Hexo博客框架工具" class="headerlink" title="安装Hexo博客框架工具"></a>安装Hexo博客框架工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>(注:若报错,请尝试在命令前加上sudo)</p><h2 id="安装Git版本工具"><a href="#安装Git版本工具" class="headerlink" title="安装Git版本工具"></a>安装Git版本工具</h2><p>下载地址：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a><br>Windows系统需下载，Mac系统因为自带Git无需操作。<br>测试安装：git - -version，查看显示版本号即成功</p><h2 id="注册github账号，如果已有就直接使用"><a href="#注册github账号，如果已有就直接使用" class="headerlink" title="注册github账号，如果已有就直接使用"></a>注册github账号，如果已有就直接使用</h2><h2 id="开始搭建Hexo博客"><a href="#开始搭建Hexo博客" class="headerlink" title="开始搭建Hexo博客"></a>开始搭建Hexo博客</h2><p>(1)在github上面新建一个代码仓库，例如：yqhJsp.github.io(yqhJsp是你的用户名)</p><p><img src="/2019/02/01/hexo搭建博客/blog1.png" alt="示例图片" title="示例图片"></p><p>(2)进入该仓库的setting，找到github pages，选择主题</p><p><img src="/2019/02/01/hexo搭建博客/blog2.png" alt="示例图片" title="示例图片"></p><p><img src="/2019/02/01/hexo搭建博客/blog3.png" alt="示例图片" title="示例图片"></p><p>(3)选完主题确定后返回setting,此时可以看到github pages上有该博客的域名<br><img src="/2019/02/01/hexo搭建博客/blog4.png" alt="示例图片" title="示例图片"></p><h2 id="使用hexo在本地新建一个站点，使用控制台命令或者git-bash在本地找个适合的位置博客地点"><a href="#使用hexo在本地新建一个站点，使用控制台命令或者git-bash在本地找个适合的位置博客地点" class="headerlink" title="使用hexo在本地新建一个站点，使用控制台命令或者git bash在本地找个适合的位置博客地点"></a>使用hexo在本地新建一个站点，使用控制台命令或者git bash在本地找个适合的位置博客地点</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init  myHexoBlog       //myHexoBlog是项目名</span><br></pre></td></tr></table></figure><p><img src="/2019/02/01/hexo搭建博客/blog5.png" alt="示例图片" title="示例图片"></p><p>下面来测试本地博客站点，在本地博客根目录下使用控制台命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g  //g是generetor的缩写，生成博客</span><br><span class="line"></span><br><span class="line">hexo s  //s是server的缩写，启动服务</span><br></pre></td></tr></table></figure><p>此时打开浏览器，输入 <a href="http://localhost:4000/，我们将会看到Hexo自带默认主题显示的博客样式如下(呃，是好看了那么一点点)：" target="_blank" rel="noopener">http://localhost:4000/，我们将会看到Hexo自带默认主题显示的博客样式如下(呃，是好看了那么一点点)：</a></p><p><img src="/2019/02/01/hexo搭建博客/blog6.png" alt="示例图片" title="示例图片"></p><h2 id="同步Github-允许公共访问"><a href="#同步Github-允许公共访问" class="headerlink" title="同步Github,允许公共访问"></a>同步Github,允许公共访问</h2><p>(1)复制github的仓库地址</p><p><img src="/2019/02/01/hexo搭建博客/blog7.png" alt="示例图片" title="示例图片"></p><p>（2）然后修改本地博客目录的配置：<br>修改本次博客根目录下的_config.yml文件，修改deploy下的配置如下：</p><p><img src="/2019/02/01/hexo搭建博客/blog8.png" alt="示例图片" title="示例图片"></p><p>(3)最后执行控制台命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git —save //安装部署插件</span><br><span class="line">hexo d //部署到github</span><br></pre></td></tr></table></figure></p><p>这样我们就可以使用<a href="https://yqhjsp.github.io/访问博客啦~!" target="_blank" rel="noopener">https://yqhjsp.github.io/访问博客啦~!</a>~</p><h2 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h2><p>激动人心的时刻来啦,下面让我来发布一篇博文试试看~~~<br>输入以下命令:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"vue项目使用vuescroll滚动"</span></span><br><span class="line"></span><br><span class="line">hexo g   //生成网页</span><br><span class="line"></span><br><span class="line">hexo d  //部署到远端(github)</span><br></pre></td></tr></table></figure></p><p><img src="/2019/02/01/hexo搭建博客/blog9.png" alt="示例图片" title="示例图片"></p><p>然后打开<a href="https://yqhjsp.github.io/，就可以看到博文了" target="_blank" rel="noopener">https://yqhjsp.github.io/，就可以看到博文了</a></p><p><img src="/2019/02/01/hexo搭建博客/blog10.png" alt="示例图片" title="示例图片"></p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>（1）创建next文件夹</p><p>切换到本地博客根目录下，在主题文件thems下创建一个新文件夹next存放即将下载的next主题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir themes/next</span><br><span class="line"></span><br><span class="line">$ curl -L https://api.github.com/repos/iissnan/hexo-theme-next/tarball | tar -zxv -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure></p><h2 id="修改博客配置文件，更换主题配置"><a href="#修改博客配置文件，更换主题配置" class="headerlink" title="修改博客配置文件，更换主题配置"></a>修改博客配置文件，更换主题配置</h2><p><img src="/2019/02/01/hexo搭建博客/blog11.png" alt="示例图片" title="示例图片"></p><h2 id="然后在控制台下输入如下命令："><a href="#然后在控制台下输入如下命令：" class="headerlink" title="然后在控制台下输入如下命令："></a>然后在控制台下输入如下命令：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  //清理缓存</span><br><span class="line"></span><br><span class="line">hexo g    //重新生成博客代码</span><br><span class="line"></span><br><span class="line">hexo d   //部署到本地</span><br></pre></td></tr></table></figure><p>下面就是更换主题后的博客啦</p><p><img src="/2019/02/01/hexo搭建博客/blog12.png" alt="示例图片" title="示例图片"></p><h2 id="博客网站美化"><a href="#博客网站美化" class="headerlink" title="博客网站美化"></a>博客网站美化</h2><p>首先说明一下：在Hexo中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p><h2 id="站点配置："><a href="#站点配置：" class="headerlink" title="站点配置："></a>站点配置：</h2><p>在本地的博客根目录下找到_config.yml，用编辑器打开，如下：</p><p><img src="/2019/02/01/hexo搭建博客/blog13.png" alt="示例图片" title="示例图片"></p><p>这里可以修改博客网站的标题、描述，语言等属性，上面更换主题也是在这个文件中修改的。大家可以在这里稍作设置</p><h2 id="重点来了，在不同电脑管理hexo博客"><a href="#重点来了，在不同电脑管理hexo博客" class="headerlink" title="重点来了，在不同电脑管理hexo博客"></a>重点来了，在不同电脑管理hexo博客</h2><p>其实，这也是我在使用Hexo搭建博客遇到的一个问题，如果我们检查自己博客在Github上的文件就会发现，github仓库里的文件和我们本地博客站点的文件夹是不同的，确切来说是少了很多内容。如果我们想在不同的电脑上管理自己的博客，就必须有源文件存在远端供我们随时下载、然后修改后重新部署到远端。</p><p>我们要理解这样一个过程：hexo -d是把本地博客源文件生成的静态网页文件同步到github上，实现部署。但是博客网站的源文件仍需要我们自己保存。这里主要有两种思路可以选择：</p><p>1.在github存放我们博客静态网页文件的仓库里另建分支brach，单独用于存放源文件。</p><p>(1)建立分支branch,切换到分支<br>(2)clone你的项目到你的Hexo目录下。例如我的是执行下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yqhJsp/yqhJsp.github.io.git</span><br></pre></td></tr></table></figure></p><p>(3)进入该分支,把源码coby到clone的项目里,然后提交<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/yqhJsp/yqhJsp.github.io.git</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">"hexo博客的源文件"</span></span><br><span class="line"></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>2.将本地博客文件存放在码云上。</p><p>这些都是关于git的操作，所以这里不用细说了。单对于这两种方法来说，我更倾向于第二种。因为毕竟这些都是我们搭建个人博客的源文件，将来还要在网站上发表文章，很多数据都在这里。使用码云我们可以创建私有仓库，将这些源文件私有存放更好一些，而且源文件和静态博客网页文件分开存放也避免使用分支频繁切换。</p><h2 id="七、遇到问题"><a href="#七、遇到问题" class="headerlink" title="七、遇到问题"></a>七、遇到问题</h2><p>1.修改了配置，网站没有变化</p><p>这种情况，大多因为修改后配置后我们直接部署，没有执行hexo clean。</p><p>2.代码无法高亮显示</p><p>在Hexo的next主题下，我们使用markDown编辑文章，如果代码无法高亮，这有可能是我们没有在标记语言后添加语言类型，我需要在添加代码片段的时候使用如下的样式：</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搭建node-js环境&quot;&gt;&lt;a href=&quot;#搭建node-js环境&quot; class=&quot;headerlink&quot; title=&quot;搭建node.js环境&quot;&gt;&lt;/a&gt;搭建node.js环境&lt;/h2&gt;&lt;p&gt;(1)安装node.js&lt;br&gt;(2)测试是否安装成功:node -
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue项目使用vuescroll滚动</title>
    <link href="http://yoursite.com/2019/02/01/vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8vuescroll%E6%BB%9A%E5%8A%A8/"/>
    <id>http://yoursite.com/2019/02/01/vue项目使用vuescroll滚动/</id>
    <published>2019-02-01T02:06:45.000Z</published>
    <updated>2019-02-01T08:23:36.612Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用vue-scroll滚动条"><a href="#使用vue-scroll滚动条" class="headerlink" title="使用vue-scroll滚动条:"></a>使用vue-scroll滚动条:</h2><h3 id="（1）在vue项目下安装vuescroll组件"><a href="#（1）在vue项目下安装vuescroll组件" class="headerlink" title="（1）在vue项目下安装vuescroll组件:"></a>（1）在vue项目下安装vuescroll组件:</h3><p>   npm install vuescroll –save</p><h3 id="（2）局部引入"><a href="#（2）局部引入" class="headerlink" title="（2）局部引入:"></a>（2）局部引入:</h3><p>import vueScroll from ‘vuescroll’<br>import ‘vuescroll/dist/vuescroll.css’</p><p>export default {<br>    components: {<br>        vueScroll<br>    },<br>    }</p><h3 id="html"><a href="#html" class="headerlink" title="html:"></a>html:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;vue-scroll :ops=<span class="string">"ops"</span>&gt;</span><br><span class="line"> 你的内容</span><br><span class="line">&lt;/vue-scroll&gt;</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置:"></a>配置:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ops: &#123;</span><br><span class="line">rail: &#123;</span><br><span class="line">size: <span class="string">'10px'</span></span><br><span class="line">&#125;,</span><br><span class="line">bar: &#123;</span><br><span class="line">onlyShowBarOnScroll: <span class="literal">true</span>,</span><br><span class="line">keepShow: <span class="literal">false</span>,</span><br><span class="line">background: <span class="string">'#c1c1c1'</span>,</span><br><span class="line">opacity: 0.5,</span><br><span class="line">hoverStyle: <span class="literal">true</span>,</span><br><span class="line">specifyBorderRadius: <span class="literal">false</span>,</span><br><span class="line">minSize: 0.3,</span><br><span class="line">size: <span class="string">'6px'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">-end</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用vue-scroll滚动条&quot;&gt;&lt;a href=&quot;#使用vue-scroll滚动条&quot; class=&quot;headerlink&quot; title=&quot;使用vue-scroll滚动条:&quot;&gt;&lt;/a&gt;使用vue-scroll滚动条:&lt;/h2&gt;&lt;h3 id=&quot;（1）在vue项目下安
      
    
    </summary>
    
    
  </entry>
  
</feed>
